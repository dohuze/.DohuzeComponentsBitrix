<?
global $USER;

function download_image($image_url, $path) {
	// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $image_url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	//curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
	//curl_setopt($ch, CURLOPT_ENCODING, 'gzip, deflate');
	curl_setopt($ch, CURLOPT_TIMEOUT, 3000);
	curl_setopt($ch, CURLOPT_HEADER, false);
	//curl_setopt($ch, CURLOPT_FAILONERROR, true);
	//curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 3);

	$data = curl_exec($ch);
	if(curl_errno($ch)) {
		$rez = 'Error Curl_PHP:' . curl_error($ch);
		die();
	} else {
		//$rez = file_put_contents($path, $data) . '(B) : ' . $image_url . "                    ";
		$rez = file_put_contents($path, $data) . '(B) ';
	}
	curl_close($ch);
	//var_dump(curl_getinfo($ch));
	return $rez;
}

function siteURL() { $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://"; $domainName = $_SERVER['HTTP_HOST']; return $protocol.$domainName; }

function generateSlugFrom($string) { 
	$string = preg_replace("/[^0-9a-zA-Z ]/m", "", $string);
	$string = preg_replace("/ /", "-", $string);
	$string = substr($string, 0, 15);
	return $string;
}

if(!function_exists('poisk_lev_prav__lev')) {
	function poisk_lev_prav__lev($lev, $prav, $stroka) {
		$razbien_array = explode($lev, $stroka);
		//print_r($razbien_array);
		$razbien_array_1 = explode($prav, $razbien_array[1]);
		$iskom_stroka = trim($razbien_array_1[0]);
		return $iskom_stroka;
	}
}

function curl_get($url) {
	if(!is_dir(dirname(__FILE__) . "/cookies"))
		mkdir(dirname(__FILE__) . "/cookies");
	$headers = array (
		"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*;q=0.8",
		"Accept-Language: ru,en-us;q=0.7,en;q=0.3",
		"Accept-Charset: windows-1251, utf-8;q=0.7,*;q=0.7"
	);
	
    $ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
    // curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); // enable if you want
	// curl_setopt($ch, CURLOPT_VERBOSE, true);   // Установите эту опцию в ненулевое значение, если вы хотите, чтобы CURL сообщала обо всех действиях.
	curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 1000);
	curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; chromeframe/12.0.742.112)");
	curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
	curl_setopt($ch, CURLOPT_REFERER, "http://ya.ru");
	curl_setopt($ch, CURLOPT_COOKIEFILE, dirname(__FILE__) . "/cookies/" . md5($_SERVER["REMOTE_ADDR"]) . "_2.txt");
	curl_setopt($ch, CURLOPT_COOKIEJAR, dirname(__FILE__) . "/cookies/" . md5($_SERVER["REMOTE_ADDR"]) . "_2.txt");
	curl_setopt($ch, CURLOPT_POST, 0);
    $data = curl_exec($ch);
    curl_close($ch);
	return $data;
}

function check_token_message() {
	global $USER;
	//$data = curl_get('https://graph.instagram.com/me' . '?fields=id,username&access_token=' . $arParams['INSTAGRAM_TOKEN']);
	$data = curl_get('https://graph.instagram.com/refresh_access_token' . '?grant_type=ig_refresh_token&access_token=' . $arParams['INSTAGRAM_TOKEN']);
	$data = json_decode($data, true);
	echo "<pre>"; print_r($data); echo "</pre>";
	$arParams['IS_TOKEN_USED'] = "N";
	if(isset($data['error'])) {
		if($USER->IsAdmin()) {
			echo '
			<script>
			BX.UI.Dialogs.MessageBox.show(
				{
					message: "Токен Instagram недействителен или IP адрес заблокирован.<br><br>Введите новый токен и снова поставьте галочку \"Использовать инстаграм token\" в настройках компонента.",
					modal: true,
					buttons: BX.UI.Dialogs.MessageBoxButtons.OK,
					onOk: function(messageBox)
					{
						console.log("onOk");
						messageBox.close();
						//window.location = window.location.pathname;
						//document.location.href = "/";
					},
				}
			);
			</script>
			';
		}
		return false;
	} else {
		$arResult['SETTINGS_TOKEN'] = unserialize(file_get_contents($_SERVER["DOCUMENT_ROOT"] . '/include/dohuze/instagram/token.txt'));
		$arResult['SETTINGS_TOKEN']['TOKEN'] = $arParams['INSTAGRAM_TOKEN'];
		file_put_contents($_SERVER["DOCUMENT_ROOT"] . '/include/dohuze/instagram/token.txt', serialize($arResult['SETTINGS_TOKEN']));
		if($USER->IsAdmin()) {
			echo '
			<script>
			BX.UI.Dialogs.MessageBox.show(
				{
					message: "Токен Instagram действителен.",
					modal: true,
					buttons: BX.UI.Dialogs.MessageBoxButtons.OK,
					onOk: function(messageBox)
					{
						console.log("onOk");
						messageBox.close();
						//window.location = window.location.pathname;
						//document.location.href = "/";
					},
				}
			);
			</script>
			';
		}
	}
	return true;
}

/**
 * Обрезает строку до определённого количества символов не разбивая слова.
 * @param string $str строка
 * @param int $length длина, до скольки символов обрезать
 * @param string $postfix постфикс, который добавляется к строке
 * @return string обрезанная строка
 */
function cutStr($str, $length=50, $postfix='...') {
    if ( strlen($str) <= $length)
        return $str;
 
    $temp = substr($str, 0, $length);
    return substr($temp, 0, strrpos($temp, ' ') ) . $postfix;
}

/**
 * Обрезает строку до определённого количества символов не разбивая слова.
 * Поддерживает многобайтовые кодировки.
 * @param string $str строка
 * @param int $length длина, до скольки символов обрезать
 * @param string $postfix постфикс, который добавляется к строке
 * @param string $encoding кодировка, по-умолчанию 'UTF-8'
 * @return string обрезанная строка
 */
function mbCutString($str, $length, $postfix='...', $encoding='UTF-8') {
    if (mb_strlen($str, $encoding) <= $length) {
        return $str;
    }
 
    $tmp = mb_substr($str, 0, $length, $encoding);
    return mb_substr($tmp, 0, mb_strripos($tmp, ' ', 0, $encoding), $encoding) . $postfix;
}


// Если вы хотите распарсить JS объект из HTML страницы или файла, то скорее всего json_decode вернет ошибку т.к. в коде будут управляющие символы или BOM. Удалить их можно следующим образом:
function json_from_HTML_to_arr($json) {
	global $USER;
	
	// Ясно
	$json = str_replace('&quot;', '"', $json);
	
	// Удаление управляющих символов
	for ($i = 0; $i <= 31; ++$i) { 
		$json = str_replace(chr($i), '', $json); 
	}
	 
	// Удаление символа Delete
	$json = str_replace(chr(127), '', $json);
	 
	// Удаление BOM
	if (0 === strpos(bin2hex($json), 'efbbbf')) {
	   $json = substr($json, 3);
	}
	 
	$res = json_decode($json, true);
	
	if($USER->IsAdmin()) {
		switch(json_last_error()) {
			case JSON_ERROR_NONE:
				//echo 'Ошибок json_last_error() нет';
			break;
			case JSON_ERROR_DEPTH:
				echo 'Достигнута максимальная глубина стека';
			break;
			case JSON_ERROR_STATE_MISMATCH:
				echo 'Некорректные разряды или несоответствие режимов';
			break;
			case JSON_ERROR_CTRL_CHAR:
				echo 'Некорректный управляющий символ';
			break;
			case JSON_ERROR_SYNTAX:
				echo 'Синтаксическая ошибка, некорректный JSON';
			break;
			case JSON_ERROR_UTF8:
				echo 'Некорректные символы UTF-8, возможно неверно закодирован';
			break;
			default:
				echo 'Неизвестная ошибка';
			break;
		}
	}
	
	return $res;
}

// определение мобильного устройства
function check_mobile_device() { 
    $mobile_agent_array = array('ipad', 'iphone', 'android', 'pocket', 'palm', 'windows ce', 'windowsce', 'cellphone', 'opera mobi', 'ipod', 'small', 'sharp', 'sonyericsson', 'symbian', 'opera mini', 'nokia', 'htc_', 'samsung', 'motorola', 'smartphone', 'blackberry', 'playstation portable', 'tablet browser');
    $agent = strtolower($_SERVER['HTTP_USER_AGENT']);    
    foreach ($mobile_agent_array as $value) {    
        if (strpos($agent, $value) !== false) return true;   
    }       
    return false; 
}


















